// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // For credential login
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts         Account[]
  sessions         Session[]
  studySessions    StudySession[]
  references       Reference[]
  createdAssignments Assignment[] @relation("ProfessorAssignments")
  submissions      Submission[]
  screenTrackings  ScreenTracking[]
  createdQuizzes   Quiz[] @relation("ProfessorQuizzes")
  quizSubmissions  QuizSubmission[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Application Models
enum UserRole {
  STUDENT
  PROFESSOR
  ADMIN
}

enum AssignmentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SubmissionStatus {
  PENDING
  IN_PROGRESS
  SUBMITTED
  GRADED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
}

model Assignment {
  id               String           @id @default(cuid())
  professorId      String           @map("professor_id")
  title            String
  description      String           @db.Text
  instructions     String?          @db.Text
  dueDate          DateTime         @map("due_date")
  estimatedTime    Int?             @map("estimated_time") // in minutes
  maxWords         Int?             @map("max_words")
  minWords         Int?             @map("min_words")
  status           AssignmentStatus @default(DRAFT)
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  professor    User         @relation("ProfessorAssignments", fields: [professorId], references: [id], onDelete: Cascade)
  submissions  Submission[]

  @@map("assignments")
}

model Quiz {
  id               String           @id @default(cuid())
  professorId      String           @map("professor_id")
  title            String
  description      String           @db.Text
  instructions     String?          @db.Text
  dueDate          DateTime         @map("due_date")
  estimatedTime    Int?             @map("estimated_time") // in minutes
  timeLimit        Int?             @map("time_limit") // time limit for taking quiz in minutes
  allowReview      Boolean          @default(false) @map("allow_review") // allow review after submission
  randomizeQuestions Boolean        @default(false) @map("randomize_questions")
  randomizeOptions Boolean          @default(false) @map("randomize_options")
  status           AssignmentStatus @default(DRAFT)
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  professor       User               @relation("ProfessorQuizzes", fields: [professorId], references: [id], onDelete: Cascade)
  questions       QuizQuestion[]
  submissions     QuizSubmission[]

  @@map("quizzes")
}

model QuizQuestion {
  id          String       @id @default(cuid())
  quizId      String       @map("quiz_id")
  type        QuestionType @default(MULTIPLE_CHOICE)
  question    String       @db.Text
  points      Int          @default(1)
  order       Int          // question order in quiz
  explanation String?      @db.Text // explanation for correct answer
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options QuizOption[]
  answers QuizAnswer[]

  @@map("quiz_questions")
}

model QuizOption {
  id         String   @id @default(cuid())
  questionId String   @map("question_id")
  text       String   @db.Text
  isCorrect  Boolean  @default(false) @map("is_correct")
  order      Int      // option order in question
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  question QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers  QuizAnswer[]

  @@map("quiz_options")
}

model QuizSubmission {
  id               String           @id @default(cuid())
  quizId           String           @map("quiz_id")
  studentId        String           @map("student_id")
  status           SubmissionStatus @default(PENDING)
  startedAt        DateTime?        @map("started_at")
  submittedAt      DateTime?        @map("submitted_at")
  timeSpent        Int?             @map("time_spent") // in seconds
  score            Float?           // percentage score
  totalPoints      Int?             @map("total_points")
  earnedPoints     Int?             @map("earned_points")
  sessionS3Key     String?          @map("session_s3_key") // Monitoring data
  analysisS3Key    String?          @map("analysis_s3_key") // Analysis results
  grade            Float?
  feedback         String?          @db.Text
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  quiz            Quiz               @relation(fields: [quizId], references: [id], onDelete: Cascade)
  student         User               @relation(fields: [studentId], references: [id], onDelete: Cascade)
  answers         QuizAnswer[]
  screenTrackings ScreenTracking[]

  @@unique([quizId, studentId])
  @@map("quiz_submissions")
}

model QuizAnswer {
  id           String   @id @default(cuid())
  submissionId String   @map("submission_id")
  questionId   String   @map("question_id")
  optionId     String?  @map("option_id") // null for unanswered questions
  isCorrect    Boolean? @map("is_correct")
  pointsEarned Int?     @map("points_earned")
  timeSpent    Int?     @map("time_spent") // time spent on this question in seconds
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  submission QuizSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question   QuizQuestion   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  option     QuizOption?    @relation(fields: [optionId], references: [id], onDelete: SetNull)

  @@unique([submissionId, questionId])
  @@map("quiz_answers")
}

model Submission {
  id               String           @id @default(cuid())
  assignmentId     String           @map("assignment_id")
  studentId        String           @map("student_id")
  status           SubmissionStatus @default(PENDING)
  textContent      String?          @db.Text
  wordCount        Int?             @map("word_count")
  timeSpent        Int?             @map("time_spent") // in minutes
  sessionS3Key     String?          @map("session_s3_key") // Typing behavior data
  referenceS3Key   String?          @map("reference_s3_key") // Calibration data
  analysisS3Key    String?          @map("analysis_s3_key") // Analysis results
  essayS3Key       String?          @map("essay_s3_key") // Essay content
  submittedAt      DateTime?        @map("submitted_at")
  grade            Float?
  feedback         String?          @db.Text
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  screenTrackings ScreenTracking[]

  @@unique([assignmentId, studentId])
  @@map("submissions")
}

model StudySession {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  title       String?
  startTime   DateTime  @map("start_time")
  endTime     DateTime? @map("end_time")
  totalTime   Int?      @map("total_time") // in seconds
  isActive    Boolean   @default(true) @map("is_active")
  s3Key       String?   @map("s3_key") // Reference to S3 stored session data
  metadata    Json?     // Store small metadata, large data goes to S3
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("study_sessions")
}

model Reference {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  title       String
  url         String?
  s3Key       String?  @map("s3_key") // Reference to S3 stored reference data
  metadata    Json?    // Store small metadata, large data goes to S3
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("references")
}

model ScreenTracking {
  id           String   @id @default(cuid())
  submissionId String?  @map("submission_id") // can be null for quiz submissions
  quizSubmissionId String? @map("quiz_submission_id") // for quiz submissions
  userId       String   @map("user_id")
  activities   String   @db.Text // JSON string of screen activities
  summary      String?  @db.Text // JSON string of summary data
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  submission     Submission?     @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  quizSubmission QuizSubmission? @relation(fields: [quizSubmissionId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("screen_trackings")
}
